#!/usr/bin/env python
from __future__ import print_function
from sosdb import Sos
from sosdb.DataSet import DataSet
from numsos.DataSource import SosDataSource
from numsos.DataSink import CsvDataSink, SosDataSink
from numsos.Transform import Transform
from numsos.ArgParse import ArgParse
import numpy as np
import datetime as dt
import time
import argparse
import sys

def do_job(cont, job_id, schema):
    src = SosDataSource()
    src.config(cont=cont)
    src.select([ 'meminfo.*' ],
               from_    = [ schema ],
               where    = [ [ 'job_id', Sos.COND_EQ, int(job_id) ]
                        ],
               order_by = 'job_comp_time')
    xfrm = Transform(src, None, limit=1024*1024)

    res = xfrm.begin()
    if res is None:
        # Job was too short to record data
        return

    while res is not None:
        res = xfrm.next()
        if res is not None:
            # concatenate TOP and TOP~1
            xfrm.concat()

    # result now on top of stack
    data = xfrm.top()                  # result on top

    # Compute (MemTotal + MemFree) / MemTotal
    memUsedRatio = (data['MemTotal'] - data['MemFree']) / data['MemTotal']
    memUsedRatio.rename(0, 'Mem_Used_Ratio')
    xfrm.push(memUsedRatio)

    # compute the standard deviation
    xfrm.std(['Mem_Used_Ratio'])
    result = xfrm.pop()

    # compute the mean
    xfrm.push(memUsedRatio)
    xfrm.mean(['Mem_Used_Ratio'])
    result <<= xfrm.pop()

    # add the component_id to the memUsedRatio dataset
    memUsedRatio <<= data['component_id']

    # Find which component had the min memory usage
    xfrm.push(memUsedRatio)
    xfrm.min([ 'Mem_Used_Ratio' ], group_name='component_id')
    xfrm.minrow('Mem_Used_Ratio_min')
    xfrm.top().rename('component_id', 'Min_Mem_Nid')
    result <<= xfrm.pop()

    # Find which component had the max memory usage
    xfrm.push(memUsedRatio)
    xfrm.max([ 'Mem_Used_Ratio' ], group_name='component_id')
    xfrm.maxrow('Mem_Used_Ratio_max')
    xfrm.top().rename('component_id', 'Max_Mem_Nid')
    result <<= xfrm.pop()

    # Compute the start time and duration
    start_time = data['timestamp'].min()
    end_time = data['timestamp'].max()
    duration = end_time - start_time
    start_time.rename(0, 'Start')
    result <<= start_time
    duration.rename(0, 'Duration')
    result <<= duration
    xfrm.drop()

    # Add the job id, name, and user
    src = SosDataSource()
    src.config(cont=cont)
    src.select([ 'job_id', 'job_name', 'job_user' ],
              from_    = [ 'jobinfo' ],
              where    = [ [ 'job_id', Sos.COND_EQ, job_id ] ],
              order_by = 'job_id')
    res = src.get_results(limit=1)
    result <<= ( 1, 'job_id', np.dtype('uint64'), job_id )
    result <<= ( 1, 'job_name', res.array('job_name').dtype, res.array('job_name')[0] )
    result <<= ( 1, 'job_user', res.array('job_user').dtype, res.array('job_user')[0] )
    return result

def get_jobs(cont, args):
    (start, end) = get_times_from_args(args)
    src = SosDataSource()
    src.config(cont=cont)
    src.select([ 'jobinfo.*' ],
              from_    = [ 'jobinfo' ],
              where    = [ [ 'job_start', Sos.COND_GE, start ],
                           [ 'job_status', Sos.COND_EQ, 2 ]
                         ],
              order_by = 'job_comp_time')
    xfrm = Transform(src, None, limit=4096)
    res = xfrm.begin()
    if res is None:
        return None
    xfrm.unique('job_id', result='job_id')
    return xfrm.top()

def get_times_from_args(args):
    if args.begin:
        start = int(args.begin.strftime("%s"))
    else:
        start = 0
    if args.end:
        end = int(args.end.strftime("%s"))
    else:
        end = 0
    return (start, end)

if __name__ == "__main__":
    parser = ArgParse(description="Compute memory summary statistics for a job")
    parser.add_argument(
        "--schema", required=False, default='meminfo',
        help="The meminfo schema name.")
    args = parser.parse_args()

    cont = Sos.Container(args.path)
    jobs = get_jobs(cont, args)
    if jobs is None:
        print("There were no jobs in the specified time period.")
        sys.exit(0)

    print("{0:8} {1:12} {2:8} {3:20} {4:16} {5:8} {6:8} {7:8} {8:8} {9:8} {10:8}".format(
        "Job", "Name", "User",
        "Start", "Duration",
        "Max NID", "Max Used",
        "Min NID", "Min Used",
        "Mean Used", "Std Dev"))
    print("{0:8} {1:12} {2:8} {3:20} {4:16} {5:8} {6:8} {7:8} {8:8} {9:8} {10:8}".format(
        "-".ljust(8, "-"), "-".ljust(12, "-"), "-".ljust(8, "-"),
        "-".ljust(20, "-"), "-".ljust(16, "-"),
        "-".ljust(8, "-"), "-".ljust(8, "-"),
        "-".ljust(8, "-"), "-".ljust(8, "-"),
        "-".ljust(8, "-"), "-".ljust(8, "-")))

    for job_id in jobs['job_id']:
        job_id = int(job_id)
        res = do_job(cont, job_id, args.schema)
        if not res:
            print("{0:8} No data...".format(job_id))
            continue
        print("{0:8}".format(int(res.array('job_id')[0])), end=' ')
        print("{0:12}".format(res.array('job_name')[0]), end=' ')
        print("{0:8}".format(res.array('job_user')[0]), end=' ')
        d = np.asscalar(res.array('Start')[0])
        ts = float(d.strftime('%s'))
        d = dt.datetime.utcfromtimestamp(ts)
        print("{0:20}".format(d.strftime("%F %R %Z")), end=' ')
        d = np.asscalar(res.array('Duration')[0])
        print("{0:16}".format(d), end=' ')
        print("{0:>8}".format(int(res.array('Max_Mem_Nid')[0])), end=' ')
        print("{0:>8}".format("%{0:.2f}".format(res.array('Mem_Used_Ratio_max')[0] * 100.0)), end=' ')
        print("{0:>8}".format(int(res.array('Min_Mem_Nid')[0])), end=' ')
        print("{0:>8}".format("%{0:.2f}".format(res.array('Mem_Used_Ratio_min')[0] * 100.0)), end=' ')
        print("{0:>8}".format("%{0:.2f}".format(res.array('Mem_Used_Ratio_mean')[0] * 100.0)), end=' ')
        print("{0:>8}".format("%{0:.2f}".format(res.array('Mem_Used_Ratio_std')[0] * 100.0)))

    print("{0:8} {1:12} {2:8} {3:20} {4:16} {5:8} {6:8} {7:8} {8:8} {9:8} {10:8}".format(
        "-".ljust(8, "-"), "-".ljust(12, "-"), "-".ljust(8, "-"),
        "-".ljust(20, "-"), "-".ljust(16, "-"),
        "-".ljust(8, "-"), "-".ljust(8, "-"),
        "-".ljust(8, "-"), "-".ljust(8, "-"),
        "-".ljust(8, "-"), "-".ljust(8, "-")))
